package com.saurabh.vendingmachine.factoryImpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.saurabh.vendingmachine.Exception.InSufficientChangeToReturnException;
import com.saurabh.vendingmachine.Exception.InSufficientPaymentException;
import com.saurabh.vendingmachine.Exception.NotAvailableException;
import com.saurabh.vendingmachine.models.Cart;
import com.saurabh.vendingmachine.models.Coin;
import com.saurabh.vendingmachine.models.Inventory;
import com.saurabh.vendingmachine.models.Item;
import com.saurabh.vendingmachine.factory.VendingMachine;
import com.saurabh.vendingmachine.factory.VendingMachineFactory;

public class VendingMachineImpl implements VendingMachine{
	
	private Inventory<Coin> cashBucket = new Inventory<Coin>();
    private Inventory<Item> itemBucket = new Inventory<Item>();  
    private long totalSales;
    private Item currentItem;
    private long currentBalance;
    
    
    public VendingMachineImpl(){
        bootUpMachine();
    }
    
	private void bootUpMachine() {
		
		for(Coin c : Coin.values()){
            cashBucket.put(c, 7);
        }
       
        for(Item i : Item.values()){
            itemBucket.put(i, 7);
        }
		
	}

	public long selectItemAndPrice(Item item) throws NotAvailableException {
		 if(itemBucket.hasItem(item)){
	            currentItem = item;
	            return currentItem.getPrice();
	     }
	     throw new NotAvailableException("The selected Item is currently not available");
	}
	public void payMoney(Coin coin) {
		currentBalance = currentBalance + coin.getDenomination();
        cashBucket.add(coin);
		
	}
	public List<Coin> returnBalance() {
		List<Coin> refund = getChangeAmount(currentBalance);
        updateCashBucket(refund);
        currentBalance = 0;
        currentItem = null;
        return refund;
	}
	public Cart<Item, List<Coin>> collectItemAndChange() {
		Item item = collectItem();
        totalSales = totalSales + currentItem.getPrice();
       
        List<Coin> change = collectChange();
       
        return new Cart<Item, List<Coin>>(item, change);
	}
	
	private List<Coin> collectChange() {
        long changeAmount = currentBalance - currentItem.getPrice();
        List<Coin> change = getChangeAmount(changeAmount);
        updateCashBucket(change);
        currentBalance = 0;
        currentItem = null;
        return change;
    }
	
	private Item collectItem() throws InSufficientChangeToReturnException,InSufficientPaymentException{
		if(isFullPaid()){
			if(hasSufficientChange()){
				itemBucket.deduct(currentItem);
				return currentItem;
			}           
			throw new InSufficientChangeToReturnException("Not Sufficient change in Inventory");
   
		}
		long remainingBalance = currentItem.getPrice() - currentBalance;
		throw new InSufficientPaymentException("Price not full paid, remaining : ", remainingBalance);
	}
	
	 private boolean isFullPaid() {
	        if(currentBalance >= currentItem.getPrice()){
	            return true;
	        }
	        return false;
	 }
	 
	 private List<Coin> getChangeAmount(long amount) throws InSufficientChangeToReturnException{
	        List<Coin> changes = Collections.EMPTY_LIST;
	       
	        if(amount > 0){
	            changes = new ArrayList<Coin>();
	            long balance = amount;
	            while(balance > 0){
	                if(balance >= Coin.QUARTER.getDenomination() 
	                            && cashBucket.hasItem(Coin.QUARTER)){
	                    changes.add(Coin.QUARTER);
	                    balance = balance - Coin.QUARTER.getDenomination();
	                    continue;
	                   
	                }else if(balance >= Coin.DIME.getDenomination() 
	                                 && cashBucket.hasItem(Coin.DIME)) {
	                    changes.add(Coin.DIME);
	                    balance = balance - Coin.DIME.getDenomination();
	                    continue;
	                   
	                }else if(balance >= Coin.NICKLE.getDenomination() 
	                                 && cashBucket.hasItem(Coin.NICKLE)) {
	                    changes.add(Coin.NICKLE);
	                    balance = balance - Coin.NICKLE.getDenomination();
	                    continue;
	                   
	                }else if(balance >= Coin.CENT.getDenomination() 
	                                 && cashBucket.hasItem(Coin.CENT)) {
	                    changes.add(Coin.CENT);
	                    balance = balance - Coin.CENT.getDenomination();
	                    continue;
	                   
	                }else{
	                    throw new InSufficientChangeToReturnException("Please select any other item there is not Sufficient change to return on this Item purchase");
	                }
	            }
	        }
	       
	        return changes;
	    }
	 
	 public void printStats(){
	        System.out.println("Total Sales : " + totalSales);
	        System.out.println("Current Item bucket : " + itemBucket);
	        System.out.println("Current Cash bucket : " + cashBucket);
	    }   
	   
	  
	    private boolean hasSufficientChange(){
	        return hasSufficientChangeForAmount(currentBalance - currentItem.getPrice());
	    }
	   
	    private boolean hasSufficientChangeForAmount(long amount){
	        boolean hasChange = true;
	        try{
	            getChangeAmount(amount);
	        }catch(InSufficientChangeToReturnException nsce){
	            return hasChange = false;
	        }
	       
	        return hasChange;
	    }

	    private void updateCashBucket(List<Coin> change) {
	        for(Coin c : change){
	            cashBucket.deduct(c);
	        }
	    }
	   
	    public long getTotalSales(){
	        return totalSales;
	    }

}
